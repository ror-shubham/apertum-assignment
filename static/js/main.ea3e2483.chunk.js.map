{"version":3,"sources":["components/Card.js","containers/Users.js","containers/Login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","UserCard","user","classes","className","variant","CardContent","Typography","color","gutterBottom","age","component","firstName","lastName","accountId","usersApi","Users","history","useHistory","useState","users","changeUsers","isFiltered","changeIsFiltered","isLoading","changeLoading","useEffect","authtoken","localStorage","getItem","a","fetch","headers","Accept","method","response","status","removeItem","push","json","result","getUsers","usersSelected","filter","length","Button","onClick","Tooltip","CircularProgress","map","key","Login","username","changeUserName","password","changePassword","hasError","changeError","handleSubmit","e","preventDefault","body","JSON","stringify","pswd","message","setItem","token","onSubmit","TextField","error","label","value","onChange","val","target","helperText","type","disabled","style","visibility","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ea3e2483.chunk.js","sourcesContent":["import React from \"react\";\nimport './Card.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport const UserCard = ({user}) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {user.age}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {`${user.firstName} ${user.lastName}`}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {user.accountId}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n};\n","import React, {useEffect, useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from \"@material-ui/core/Button\";\nimport {UserCard} from \"../components/Card\";\nimport './Users.css'\n\nconst usersApi = 'https://apertum-interview.herokuapp.com/api/users';\n\n\nexport const Users = () => {\n  let history = useHistory();\n  const [users, changeUsers] = useState([]);\n  const [isFiltered, changeIsFiltered] = useState(false);\n  const [isLoading, changeLoading] = useState(false);\n\n  useEffect(() => {\n    let authtoken = localStorage.getItem(\"auth-token\");\n    if (authtoken === null) history.push('/login');\n    async function getUsers() {\n      changeLoading(true);\n      const response = await fetch(usersApi, {\n        headers: {\n          Accept: \"application/json\",\n          \"Authorization\": \"Bearer \"+authtoken,\n        },\n        method: \"GET\"\n      });\n\n      if (response.status === 403) {\n        localStorage.removeItem(\"auth-token\");\n        history.push('/login');\n      }\n      const result = await response.json();\n      changeUsers(result);\n      changeLoading(false);\n    }\n    getUsers()\n  }, [history]);\n  const signout = () => {\n    localStorage.removeItem(\"auth-token\");\n    history.push('/login');\n  };\n  const usersSelected =\n    isFiltered ?\n      users.filter(user => (user.age >= 20) && (user.age < 30) && ((user.firstName + user.lastName).length >= 10))\n      :\n      users;\n  return (\n    <div className=\"users-parent\">\n      <div>\n        <Button variant=\"contained\" onClick={signout} color=\"primary\" className=\"signout\">Sign Out</Button>\n      </div>\n      <div>\n        <Tooltip title=\"Users with age >= 20 and < 30, full name length >= 10\">\n          <Button variant=\"contained\" onClick={() => changeIsFiltered(!isFiltered)} color=\"secondary\">Toggle Filter</Button>\n        </Tooltip>\n      </div>\n      {\n        isLoading ?\n          <CircularProgress />  :\n          <div className=\"users-list\">\n            {usersSelected.map(user => {\n              return (\n                <UserCard user={user} key={user.accountId}/>\n              )\n            })}\n          </div>\n      }\n    </div>\n  )\n};\n","import React, {useEffect, useState} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport './Login.css';\n\nconst loginApi = 'https://apertum-interview.herokuapp.com/api/user/login';\nexport const Login = () => {\n  const [username, changeUserName] = useState('');\n  const [password, changePassword] = useState('');\n  const [isLoading, changeLoading] = useState(false);\n  const [hasError, changeError] = useState(false)\n\n  let history = useHistory();\n\n  useEffect(() => {\n    if (localStorage.getItem('auth-token') !== null) history.push('users')\n  }, [history]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    changeError(false);\n    changeLoading(true);\n\n    const response = await fetch(loginApi, {\n      body: JSON.stringify({\n        accountId: username,\n        pswd: password\n      }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    });\n    const result = await response.json();\n    if (result.message === 'You got the token!') {\n      localStorage.setItem('auth-token', result.token);\n      history.push('/users')\n    } else {\n      changeError(true);\n      changeLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form-login\">\n        <div className=\"login-inputs\">\n          <div>\n            <TextField\n              error={hasError}\n              label=\"username\"\n              variant=\"outlined\"\n              value={username}\n              onChange={val=>changeUserName(val.target.value)}\n              helperText={hasError ? \"Incorrect username or password.\" : '' }\n            />\n          </div>\n          <div>\n            <TextField\n              error={hasError}\n              label=\"password\"\n              variant=\"outlined\"\n              value={password}\n              type=\"password\"\n              onChange={val=>changePassword(val.target.value)}\n              helperText={hasError ? \"Incorrect username or password.\" : '' }\n            />\n          </div>\n          <div>\n            <Button variant=\"contained\" onClick={handleSubmit} color=\"primary\" disabled={isLoading}>Submit</Button>\n          </div>\n          <CircularProgress style={!isLoading ? {visibility: 'hidden'} : null}/>\n        </div>\n    </form>\n  )\n};\n","import React from 'react';\nimport {Users} from './containers/Users';\nimport {Login} from './containers/Login';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}